/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package latte;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;

class CustomClassLoaderTest {
    static Path inputJarFilePath;
    static Path tempDirPath;
    static int numAdditionalJars = 3;
    static Path[] additionalJars = new Path[numAdditionalJars];

    @BeforeAll
    static void beforeAll() throws IOException {
        inputJarFilePath = Files.createTempFile(null, ".jar");
        tempDirPath = Files.createTempDirectory(null);
        for (int i = 0; i < numAdditionalJars; i++) {
            additionalJars[i] = Files.createTempFile(tempDirPath, null, ".jar");
        }

    }

    @AfterAll
    static void afterAll() throws IOException {
        Files.delete(inputJarFilePath);
        for (int i = 0; i < numAdditionalJars; i++) {
            Files.delete(additionalJars[i]);
        }
        Files.delete(tempDirPath);
    }

    @Test
    void testSetAdditionalClassPaths() throws IOException {
        CustomClassLoader classLoader = new CustomClassLoader(inputJarFilePath.toUri().toURL());
        String[] additionalJarNames = new String[numAdditionalJars];
        for (int i = 0; i < numAdditionalJars; i++) {
            additionalJarNames[i] = additionalJars[i].toString();
        }
        String classPathString = String.join(File.pathSeparator, additionalJarNames);

        classLoader.setAdditionalClassPath(classPathString);

        assertEquals(numAdditionalJars + 1, classLoader.getURLs().length);
        assertTrue(Arrays.asList(classLoader.getURLs()).contains(inputJarFilePath.toUri().toURL()));
        for (int i = 0; i < numAdditionalJars; i++) {
            assertTrue(Arrays.asList(classLoader.getURLs()).contains(additionalJars[i].toUri().toURL()));
        }
    }

    @Test
    void testSetAdditionalClassPathsWildcard() throws IOException {
        CustomClassLoader classLoader = new CustomClassLoader(inputJarFilePath.toUri().toURL());

        classLoader.setAdditionalClassPath(tempDirPath.toString() + File.separator + "*");

        assertEquals(numAdditionalJars + 1, classLoader.getURLs().length);
        assertTrue(Arrays.asList(classLoader.getURLs()).contains(inputJarFilePath.toUri().toURL()));
        for (int i = 0; i < numAdditionalJars; i++) {
            assertTrue(Arrays.asList(classLoader.getURLs()).contains(additionalJars[i].toUri().toURL()));
        }
    }
}
